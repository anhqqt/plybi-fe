#!/bin/bash
# Step 1 function
step_1() {
    wget https://raw.githubusercontent.com/sheid1309/DevOps-Scripts/master/docker.sh
    chmod u+x docker.sh
    . docker.sh
    rm -rf docker.sh
    . install.sh
}

# Step 2 function
step_2(){
    # export SSL_TYPE=http                                          # TRADITIONAL WAY
    # docker-compose build --build-arg SSL_TYPE=http                # TRADITIONAL WAY
    docker-compose up -d --build --force-recreate
    . install.sh
}

# Step 3 function
##################
# OLD WAY WITH STANDALONE CERTBOT CONTAINER TO GENERATE SSL CERTS
# step_3(){
#     docker rm -f certbot
#     docker run -it --name certbot \
#     -v certbot-etc:/etc/letsencrypt \
#     -v certbot-var:/var/lib/letsencrypt \
#     -v web-root:/home/plybi \
#     certbot/certbot \
#     certonly --webroot --webroot-path=/home/plybi --agree-tos --no-eff-email -d plybi.com -d www.plybi.com
#     . install.sh
# }
##################
##################
# NEW WAY WITH SSL ALREADY GENERATED FROM STEP 2
# STEP 3 WILL NOW ONLY RERUN NGINX WITH CONFIG FOR PRODUCTION AND FOR USING SSL
##################
step_3() {
    # docker-compose down             # Already have --force-recreate below
    docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build --force-recreate
    . install.sh
}

# Step 4 function
step_4(){
    # docker-compose down             # Already have --force-recreate below
    docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build --force-recreate
    . install.sh
}

# Step 5 function
# step_5(){
#     export SSL_TYPE=https
#     docker-compose down
#     # docker-compose build --build-arg SSL_TYPE=https
#     docker-compose up -d
#     . install.sh
# }